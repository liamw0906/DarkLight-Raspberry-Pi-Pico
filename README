Hello future undergrad.

My name is Liam and this is my creation. The purpose of this .txt file is to describe to you the general idea of the code and things I learned along the way which might make life easier for you.
I apologize in advance for the likely hard to read coding style, for I'm not a programmer.
This code is intended to be ran using the Arduino IDE on a Raspberry Pi Pico to be used in the DarkLight experiment.

At the time of writing this, there are a few problems.
0. I was never able to properly control the DACs. I don't believe there to be any coding issues, but rather likely an operation theory error and/or faulty DACs. But I'm sure you're plenty capable of figuring that out. Maybe look into the input register. 
1. There is currently no ADC control set up. This is a problem for you.
2. There are probably much nicer UI systems to create. Mine feels slow and janky so I'm sure the fancy physicists who use this code will thank you for making it nicer. 

Here are the data sheets for the DACs and the ADC. Here, you can find details regarding operation theory, the commands they take, etc.
https://www.analog.com/media/en/technical-documentation/data-sheets/AD5628_5648_5668.pdf ---> DAC data sheet
https://www.snapeda.com/parts/MAX1229AEEP/Maxim%20Integrated/datasheet/ ---> ADC data sheet

If you have any coding experience, you'll probably notice that the Arduino IDE is very similar to C++ so most of you're knowledge in that language will transfer over. Nonetheless, you can refer to the Arduino IDE Reference for anything regarding the operation of the language, such as the Serial Library and the SPI Library. Don't forget the semicolons. ;
https://www.arduino.cc/reference/en/

Basically, to transfer data using SPI, you want to start with the SPI.beingTransaction(); command, then write the CS pin low, and transfer the data using SPI.transfer(); which takes integers 0-255. You can see in the data sheets what the commands are to be sent. The commands are in binary, so you have to convert that into decimal and you can see I've already done that part. 
You then write the CS pin high and call the SPI.endTransaction(); function to finish it off. There's not a whole lot of documentation regarding the opeartion.

Sometimes the code isn't the issue. I learned to do a lot of trouble shooting using the oscilloscope. I'm sure you're at least somewhat familiar with how those things work. Using the scope you can see the binary signals sent by the Pico to the DACs and ADC so you can make sure you're transmitting signals properly. It's also been helpful using a voltmeter and ohmmeter in order to find any shorts or what not in the circuit. 

Sometimes the Picos like to act up. Sometimes the compiler doesn't realize that your code is going to break the Pico so just be careful. If you notice the IDE no longer recognizes the Pico, try unplugging it, and while its unplugged, hold down the little BOOTSEL button and keep holding it down as you plug it back in. This resets the memory I think and normally fixes the issue. 

Anyway, I'll stop rambling. I'm sure theres more things I could tell you but I think once you get the hang of the IDE then everything is somewhat self explanatory. These electronics can be pretty frustrating at times but don't give up because the dark matter won't detect itself.

Good luck! 

-Liam Wallace, Spring 2023